{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","HOC/withRedirect.tsx","Components/Dialogs/DialogItem/DialogsItem.tsx","Components/Dialogs/Messages/Message.tsx","Components/Dialogs/AddMessageForm.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","DialogItem","path","id","className","classes","dialog","name","Message","message","maxLength100","maxLengthCreator","AddMessageForm","reduxForm","form","onSubmit","handleSubmit","createField","Textarea","required","Dialogs","dialogsElements","dialogsPage","dialogs","map","key","messageElement","messages","dialogsItems","values","sendMessage","newMessageBody","compose","dialogsActions"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,+GCI1IC,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,SAShB,SAASE,EAAsBC,GAclC,OAJqCC,YACpCN,EAA4B,GADQM,EAR2B,SAACC,GAAW,IACnEL,EAAwBK,EAAxBL,OAAWM,EADuD,YAC1CD,EAD0C,YAGvE,OAAKL,EAEE,kBAACG,EAAqBG,GAFT,kBAAC,IAAD,CAAUC,GAAI,gB,sGCF3BC,EATmB,SAACH,GAC/B,IAAII,EAAO,YAAcJ,EAAMK,GAC/B,OACI,yBAAKC,UAAS,UAAKC,IAAQC,SACvB,kBAAC,IAAD,CAASN,GAAIE,GAAM,8BAAOJ,EAAMS,SCC7BC,EANgB,SAACV,GAC5B,OACI,yBAAKM,UAAWC,IAAQI,SAAUX,EAAMW,U,yBCH1CC,EAAeC,YAAiB,KAkBzBC,EAAiBC,YAAyC,CAACC,KAAM,wBAAhDD,EAbwD,SAACf,GACnF,OACI,0BAAMiB,SAAUjB,EAAMkB,cAClB,6BACKC,YAAoC,qBAAsB,iBAAkBC,IAAU,CAACC,IAAUT,KAEtG,6BACI,qDCgCDU,EAzBgB,SAACtB,GAE5B,IAAIuB,EACAvB,EAAMwB,YAAYC,QAAQC,KAAI,SAAAlB,GAAM,OAAI,kBAAC,EAAD,CAAYC,KAAMD,EAAOC,KAAMJ,GAAIG,EAAOH,GAAIsB,IAAKnB,EAAOH,QAElGuB,EACA5B,EAAMwB,YAAYK,SAASH,KAAI,SAAAf,GAAO,OAAI,kBAAC,EAAD,CAASA,QAASA,EAAQA,QAASN,GAAIM,EAAQN,GAAIsB,IAAKhB,EAAQN,QAM9G,OACI,yBAAKC,UAAWC,IAAQkB,SACpB,yBAAKnB,UAAWC,IAAQuB,cACnBP,GAEL,yBAAKjB,UAAWC,IAAQsB,UACnBD,GAEL,kBAACd,EAAD,CAAgBG,SAZJ,SAACc,GACjB/B,EAAMgC,YAAYD,EAAOE,qB,wBCkBlBC,sBACXnC,aArBkB,SAACL,GACnB,MAAO,CACH8B,YAAa9B,EAAM8B,eAmBhB,eAAsBW,MAC7BtC,IAFWqC,CAGTZ","file":"static/js/4.11dc76d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1Fc7h\",\"dialogsItems\":\"Dialogs_dialogsItems__lkmAy\",\"dialog\":\"Dialogs_dialog__3WCgH\",\"messages\":\"Dialogs_messages__3rpty\"};","import React, {FC} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n\r\n        return <WrappedComponent {...restProps as WCP} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>\r\n    (mapStateToPropsForRedirect, {})\r\n    (RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import React, {FC} from 'react';\r\nimport classes from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: FC<PropsType> = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={`${classes.dialog}`}>\r\n            <NavLink to={path}><span>{props.name}</span></NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React, {FC} from 'react';\r\nimport classes from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\nconst Message: FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React, {FC} from \"react\";\r\nimport {createField, Textarea} from \"../Common/FormControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../Utils/Validators\";\r\nimport {NewMessageFormType} from \"./Dialogs\";\r\nimport {LoginFormValuesType} from \"../Login/Login\";\r\n\r\nconst maxLength100 = maxLengthCreator(100);\r\n\r\ntype PropsType = {}\r\ntype NewMessageFormKeysType = Extract<keyof NewMessageFormType, string>\r\n\r\nconst MessageForm: FC<InjectedFormProps<NewMessageFormType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormKeysType>('write your message', 'newMessageBody', Textarea, [required, maxLength100])}\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageForm = reduxForm<NewMessageFormType, PropsType>({form: 'dialogAddMessageForm'})(MessageForm);\r\n","import React, {FC} from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Messages/Message\";\r\nimport {AddMessageForm} from \"./AddMessageForm\";\r\nimport {DialogsInitialStateType} from \"../../Redux/dialogs_reduser\";\r\n\r\ntype DialogType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\ntype MessageType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\ntype PropsType = {\r\n    dialogsPage: DialogsInitialStateType\r\n    sendMessage: (newMessageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: FC<PropsType> = (props) => {\r\n\r\n    let dialogsElements =\r\n        props.dialogsPage.dialogs.map(dialog => <DialogItem name={dialog.name} id={dialog.id} key={dialog.id} />);\r\n\r\n    let messageElement =\r\n        props.dialogsPage.messages.map(message => <Message message={message.message} id={message.id} key={message.id}/>);\r\n\r\n    let addNewMessage = (values: {newMessageBody: string}) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    };\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                {messageElement}\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {dialogsActions} from \"../../Redux/dialogs_reduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../HOC/withRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\n/*\r\ntype DialogType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\ntype MessageType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\nexport type MapStatePropsType = {\r\n    dialogsPage: {\r\n        dialogs: Array<DialogType>\r\n        messages: Array<MessageType>\r\n    }\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n    sendMessage: any\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & PropsFromRedux\r\n*/\r\n\r\nlet mapStateToProps = (state: AppStateType)/*: MapStatePropsType*/ => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n};\r\n/*\r\nlet mapDispatchToProps = (dispatch: any): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: any) => {\r\n            dispatch(dialogsActions.addMessage(newMessageBody));\r\n        },\r\n    }\r\n};\r\n\r\n\r\nconst connector: any = connect(mapStateToProps, mapDispatchToProps)\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n*/\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...dialogsActions}),\r\n    withAuthRedirect\r\n    )(Dialogs)"],"sourceRoot":""}