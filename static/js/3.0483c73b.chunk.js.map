{"version":3,"sources":["HOC/withRedirect.tsx","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/addPostForm.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","ev","currentTarget","value","autoFocus","onBlur","updateStatus","className","classes","statusText","onDoubleClick","ProfileDataReduxForm","reduxForm","form","profile","handleSubmit","error","onSubmit","profileDataForm","loginClasses","formSummaryError","createField","Input","Textarea","type","Object","keys","contacts","map","key","contact","ProfileInfo","isOwner","savePhoto","saveProfile","Contact","contactTitle","contactValue","descriptionBlock","avatarBlock","src","photos","large","userPhoto","avatar","alt","fileSelect","target","files","length","id","htmlFor","profileData","initialValues","formData","then","goToEditMode","profileInfo","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","onClick","Post","item","message","likesCount","required","MyPosts","postsElements","posts","reverse","p","postsBlock","values","addPost","newPostText","MyPostsContainer","compose","profilePage","profileActions","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","React","Component","getUserProfileThunk","getStatusThunk","updateStatusThunk","savePhotoThunk","saveProfileThunk","withRouter"],"mappings":"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","file":"static/js/3.0483c73b.chunk.js","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>;\r\n\r\n        return <WrappedComponent {...restProps as WCP} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>\r\n    (mapStateToPropsForRedirect, {})\r\n    (RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3wgvG\",\"avatarBlock\":\"ProfileInfo_avatarBlock__NKQ67\",\"status\":\"ProfileInfo_status__YRKiw\",\"profileData\":\"ProfileInfo_profileData__3gOJX\",\"fileSelect\":\"ProfileInfo_fileSelect__1Nq2P\",\"contact\":\"ProfileInfo_contact__1XghH\",\"avatar\":\"ProfileInfo_avatar__1GTpU\",\"statusText\":\"ProfileInfo_statusText__1nbKh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1mTB2\",\"posts\":\"MyPosts_posts__3sSlT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1rRzJ\"};","import React, {ChangeEvent, FC, useEffect, useState} from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\"\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst ProfileStatusWithHooks: FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n        },[props.status]\r\n    );\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (ev: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(ev.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode ?\r\n                <div className={classes.statusText}>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'New status...'}</span>\r\n                </div> :\r\n                <div>\r\n                    <input onChange={onStatusChange}\r\n                           autoFocus={true}\r\n                           onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React, {FC} from \"react\";\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../Common/FormControls/FormControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport loginClasses from \"../../Login/Login.module.css\";\r\nimport classes from \"./ProfileDataForm.module.css\";\r\nimport {ProfileType} from \"../../../Types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({profile, handleSubmit, error}) => {\r\n    return <form onSubmit={handleSubmit} className={classes.profileDataForm}>\r\n        {error &&\r\n        <div className={loginClasses.formSummaryError}>\r\n            <span>{error}</span>\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {createField<ProfileTypeKeys>('Your full name', 'fullName', Input, [])}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>:\r\n            {createField('Something about you..', 'aboutMe', Textarea, [])}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a\r\n                job</b>: {createField<ProfileTypeKeys>('', 'lookingForAJob', Input, [], {type: 'checkbox'})}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            {createField<ProfileTypeKeys>('Skills:', 'lookingForAJobDescription', Textarea, [])}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={loginClasses.contact}>\r\n                <b> {key}: {createField(key, 'contacts.' + key, Input, [])}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n        <div><button>Save</button></div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataReduxForm;\r\n","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport Preloader from \"../../Common/Prealoader/Prealoader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataReduxForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../Types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) return <Preloader/>\r\n\r\n\r\n    const onMainPhotoSelected = (ev: ChangeEvent<HTMLInputElement>) => {\r\n        if (ev.target.files?.length) {    //or \"if (ev.target && ev.target.files.length)\"\r\n            savePhoto(ev.target.files[0]);\r\n        }\r\n    }\r\n\r\n    type ContactType = {\r\n        contactTitle: string\r\n        contactValue: string\r\n    }\r\n\r\n    const Contact: FC<ContactType>= ({contactTitle, contactValue}) => {\r\n        return <div className={classes.contact}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    }\r\n\r\n    type ProfileDataPropsType = {\r\n        profile: ProfileType\r\n        isOwner: boolean\r\n        goToEditMode: () => void\r\n    }\r\n\r\n    const ProfileData: FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n        return (\r\n            <div className={classes.profileInfo}>\r\n                <div>\r\n                    <b>Full name</b>: {profile.fullName}\r\n                </div>\r\n                <div>\r\n                    <b>About me</b>: {profile.aboutMe}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n                </div>\r\n                {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n                }\r\n                <div>\r\n                    <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                })}\r\n                </div>\r\n                {isOwner &&\r\n                <div>\r\n                    <button onClick={goToEditMode}>edit...</button>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then( () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={classes.descriptionBlock}>\r\n\r\n            <div className={classes.avatarBlock}><img src={profile.photos.large || userPhoto} className={classes.avatar} alt={\"\"}/>\r\n                {isOwner && <div className={classes.fileSelect}>\r\n                    <input type={'file'} onChange={onMainPhotoSelected} id='file'/>\r\n                    <label htmlFor={'file'}>Choose file...</label>\r\n                </div>\r\n                }\r\n            </div>\r\n\r\n            <div className={classes.status}>\r\n                <ProfileStatusWithHooks\r\n                    status={status}\r\n                    updateStatus={updateStatus}/>\r\n            </div>\r\n\r\n            <div className={classes.profileData}>\r\n                {editMode\r\n                    ? <ProfileDataReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile}\r\n                                   isOwner={isOwner}\r\n                                   goToEditMode={() => {\r\n                                       setEditMode(true)\r\n                                   }}/>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default ProfileInfo;\r\n","import React, {FC} from 'react';\r\nimport classes from './Post.module.css';\r\n\r\ntype PropsType = {\r\n\tmessage: string\r\n\tlikesCount: number\r\n\tid: number\r\n}\r\n\r\nconst Post: FC<PropsType> = (props) => {\r\n\treturn (\r\n\r\n\t\t<div className={classes.item}>\r\n\t\t\t{/*<img src=\"https://cdn.pixabay.com/photo/2016/12/13/16/17/dancer-1904467_960_720.png\" alt=\"user\"/>*/}\r\n\t\t\t {props.message}\r\n\t\t\t<div>\r\n\t\t\t\t<span>like</span>\r\n\t\t\t\t{` ${props.likesCount}`}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default Post;\r\n","import {InjectedFormProps, reduxForm} from \"redux-form\"\r\nimport {createField, GetStringKeys, Textarea} from \"../../Common/FormControls/FormControls\"\r\nimport React, {FC} from \"react\"\r\nimport {required} from \"../../../Utils/Validators\"\r\n\r\ntype PropsType = {  }\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\ntype AddPostFormValuesKeysType = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst AddPostForm: FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                 {createField<AddPostFormValuesKeysType>('Your post...', 'newPostText', Textarea, [required])}\r\n             </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profileAddPost'})(AddPostForm)","import React, {FC} from 'react'\r\nimport classes from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport AddPostForm, {AddPostFormValuesType} from \"./addPostForm\"\r\nimport {PostsType} from \"../../../Types/types\"\r\n\r\nexport type MapStatePropsType = {\r\n    posts: Array<PostsType>\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts:FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount} id={p.id}/>)\r\n\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm onSubmit={onAddPost}/>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport {profileActions} from \"../../../Redux/profile_reduser\";\r\nimport MyPosts, {MapDispatchPropsType, MapStatePropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n\r\n};\r\n\r\nconst MyPostsContainer = compose (\r\n    connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType >(mapStateToProps, { addPost: profileActions.addPost})\r\n    (MyPosts))\r\n\r\nexport default MyPostsContainer;\r\n","import React, {FC} from 'react';\r\nimport classes from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../Types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: FC<PropsType>= (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatusThunk,\r\n    getUserProfileThunk,\r\n    savePhotoThunk,\r\n    saveProfileThunk,\r\n    updateStatusThunk\r\n} from \"../../Redux/profile_reduser\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../HOC/withRedirect\";\r\nimport {ProfileType} from \"../../Types/types\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            /* if (!userId) {\r\n                 this.props.history.push('/login');\r\n             }*/\r\n        }\r\n\r\n        this.props.getUserProfile(userId as number);\r\n        this.props.getStatus(userId as number);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                isOwner={!this.props.match.params.userId}\r\n                savePhoto={this.props.savePhoto}\r\n                saveProfile={this.props.saveProfile}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(\r\n        mapStateToProps,\r\n        {\r\n            getUserProfile: getUserProfileThunk,\r\n            getStatus: getStatusThunk,\r\n            updateStatus: updateStatusThunk,\r\n            savePhoto: savePhotoThunk,\r\n            saveProfile: saveProfileThunk\r\n        }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}